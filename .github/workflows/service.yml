name: service

on:
  workflow_call:
    inputs:
      type:
        type: string
        required: false
        default: service
      containerRegistry:
        type: string
        required: true
        default: ghcr.io
      mysqlEnabled:
        type: boolean
        required: false
        default: false
    
    outputs:
      PipelineConfig: 
        description: "Used pipeline config"
        value: ${{ jobs.Setup.outputs.PipelineConfig }}

jobs:

  Setup:
    runs-on: ubuntu-latest

    outputs:
      PipelineConfig: ${{ steps.script_setup.outputs.result }}
      BuildNode: ${{ steps.define_builders.outputs.build_node }}
      BuildPython: ${{ steps.define_builders.outputs.build_python }}

    steps:

      # pre-job
      - name: Cloning repository
        uses: actions/checkout@v3

      - name: Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .ff
          repository: filipeforattini/ff-iac-github-actions

      - name: Pipeline setup
        uses: actions/github-script@v6
        id: script_setup
        with:
          result-encoding: string
          script: |
            return require('./.ff/src/steps/setup')({ 
              context, 
              inputs: { 
                containerRegistry: "${{ inputs.containerRegistry }}",
              },
            })

      - name: Define build path
        env:
          PIPELINE_SETUP: ${{ steps.script_setup.outputs.result}}
        id: define_builders
        run: |
          echo "::set-output name=build_node::$(echo $PIPELINE_SETUP | jq -r '.code.isNode')"
          echo "::set-output name=build_python::$(echo $PIPELINE_SETUP | jq -r '.code.isPython')"

  Build-Node:
    runs-on: ubuntu-latest
    needs: Setup
    if: |
      github.event_name == 'push'
      && needs.Setup.outputs.BuildNode == 'true'

    strategy:
      matrix:
        node-version: [16, 17]
    
    steps:

      # pre-job
      - name: Cloning repository
        uses: actions/checkout@v3

      - name: Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .ff
          repository: filipeforattini/ff-iac-github-actions

      - name: Load setup configs
        env:
          PIPELINE_SETUP: ${{ needs.Setup.outputs.PipelineConfig }}
        id: node_setup
        run: |
          echo "::set-output name=cache_key::$(echo $PIPELINE_SETUP | jq -r '.code.cacheKey')"
          echo "::set-output name=dependency_command::$(echo $PIPELINE_SETUP | jq -r '.code.dependencyCommand')"
          echo "::set-output name=has_dockerfile::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.hasDockerfile')"
          echo "::set-output name=has_dockerignore::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.hasDockerignore')"
          echo "::set-output name=docker_command::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.command')"
          echo "::set-output name=docker_entrypoint::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.entrypoint')"
          echo "::set-output name=docker_dependency_command::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.dependencyCommand')"

      # install node
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # load caches
      - name: Load cache from yarn.lock
        uses: actions/cache@v2
        if: jobs.node_setup.outputs.cache_key == 'yarn.lock'
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Load cache from package-lock.json
        uses: actions/cache@v2
        if: jobs.node_setup.outputs.cache_key == 'package-lock.json'
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Load cache from package.json
        uses: actions/cache@v2
        if: jobs.node_setup.outputs.cache_key == 'package-lock.json'
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package.json') }}

      # install dependencies
      - name: Install dependencies
        run: ${{ jobs.node_setup.outputs.dependency_command }}

      # run scripts
      - run: npm run lint --if-present
      - run: npm run test --if-present
      - run: npm run build --if-present

      # pre-build
      - name: Create .dockerignore
        uses: actions/github-script@v6
        if: steps.node_setup.outputs.has_dockerignore == 'false'
        with:
          result-encoding: string
          script: |
            return require('./.ff/src/steps/generate-dockerignore')({ 
              assetsToIgnore: ['node_modules'],
            })

      - name: Create dockerfile
        uses: actions/github-script@v6
        if: steps.node_setup.outputs.has_dockerfile == 'false'
        with:
          result-encoding: string
          script: |
            return require('./.ff/src/steps/generate-dockerfile')({ 
              image = 'node',
              tag = '${{ matrix.node-version }}-alpine',
              maintainer = '${{ context.payload.head_commit.committer.email }}',
              dependencyCommand = '${{ steps.node_setup.outputs.docker_dependency_command }}',
              entrypoint = '${{ steps.node_setup.outputs.docker_entrypoint }}',
              command = ''${{ steps.node_setup.outputs.docker_command }}'',
            })

      # build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Define image tags
        id: generate_docker_image_tags
        run: |
          DOCKER_IMAGE_TAGS="ghcr.io/${{github.repository}}:latest"
          DOCKER_IMAGE_TAGS="${DOCKER_IMAGE_TAGS}, ghcr.io/${{github.repository}}:d-${{needs.Setup.outputs.Date}}"
          DOCKER_IMAGE_TAGS="${DOCKER_IMAGE_TAGS}, ghcr.io/${{github.repository}}:b-${{needs.Setup.outputs.Branch}}"
          DOCKER_IMAGE_TAGS="${DOCKER_IMAGE_TAGS}, ghcr.io/${{github.repository}}:c-${{needs.Setup.outputs.ShaHash}}"
          DOCKER_IMAGE_TAGS="${DOCKER_IMAGE_TAGS}, ghcr.io/${{github.repository}}:t-${{needs.Setup.outputs.Timestamp}}"
          DOCKER_IMAGE_TAGS="${DOCKER_IMAGE_TAGS}, ghcr.io/${{github.repository}}:node-${{matrix.node-version}}"
          DOCKER_IMAGE_TAGS="${DOCKER_IMAGE_TAGS}, ghcr.io/${{github.repository}}:node-${{matrix.node-version}}-latest"
          DOCKER_IMAGE_TAGS="${DOCKER_IMAGE_TAGS}, ghcr.io/${{github.repository}}:node-${{matrix.node-version}}-d-${{needs.Setup.outputs.Date}}"
          DOCKER_IMAGE_TAGS="${DOCKER_IMAGE_TAGS}, ghcr.io/${{github.repository}}:node-${{matrix.node-version}}-b-${{needs.Setup.outputs.Branch}}"
          DOCKER_IMAGE_TAGS="${DOCKER_IMAGE_TAGS}, ghcr.io/${{github.repository}}:node-${{matrix.node-version}}-c-${{needs.Setup.outputs.ShaHash}}"
          echo "TAGS = ${DOCKER_IMAGE_TAGS}"
          echo "::set-output name=docker_image_tags::${DOCKER_IMAGE_TAGS}"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{steps.generate_docker_image_tags.outputs.docker_image_tags}}
          labels: "organization: ${{github.repository_owner}}, repository: ${{github.repository}}, branch: ${{needs.Setup.outputs.Branch}}, commit: ${{needs.Setup.outputs.ShaHash}}, date: ${{needs.Setup.outputs.Date}}, timestamp: ${{needs.Setup.outputs.Timestamp}}"

  Build-Python:
    runs-on: ubuntu-latest
    needs: Setup
    if: |
      github.event_name == 'push'
      && needs.Setup.outputs.BuildPython == 'true'

    strategy:
      matrix:
        python: [3.7, 3.8, 3.9]
    
    steps:
      - uses: actions/checkout@v3

      - name: Pip install
        run: pip install -r requirements.txt
