name: mob

concurrency:
  group: ${{github.workflow}}-${{github.event_name}}


#--------------------------------------------------#
#                     Triggers                     # 
#--------------------------------------------------#
on:

  workflow_call:

    inputs:
      mainBranch:
        type: string
        required: false
        default: master
        description: "Main repository branch may interfere with versioning"
      ecosystem:
        type: string
        required: false
        description: "Special prefix that will be added to the image name"
      staticAnalysis:
        type: boolean
        required: false
        default: false
        description: "Enable static analysis scans"
      autoVersioning:
        type: boolean
        required: false
        default: true
        description: "Enable auto versioning with semantic versioning"
      buildDirectory:
        type: string
        required: false
        default: "dist"
        description: "Output directory from build"


#--------------------------------------------------#
#                  Workflow Jobs                   # 
#--------------------------------------------------#
jobs:

  #--------------------------------------------------#
  #                    Setup Jobs                    # 
  #--------------------------------------------------#
  Setup:
    runs-on: ubuntu-latest

    outputs:
      Event: ${{steps.analysis.outputs.event}}
      Analysis: ${{steps.analysis.outputs.result}}
      Environment: ${{steps.analysis.outputs.environment}}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3

      # job
      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        # env:
        #   PIPESECRET_KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        #   PIPESECRET_REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        #   PIPESECRET_REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
        #   PIPESECRET_PIPELINE_DEPLOY_TOKEN: ${{ secrets.PIPELINE_DEPLOY_TOKEN }}
        with:
          writeSummary: true

  #--------------------------------------------------#
  #                  Static Analysis                 # 
  #--------------------------------------------------#
  Static-Analysis:
    runs-on: ubuntu-latest
    if: needs.Setup.outputs.Event == 'push'
    needs: Setup

    permissions:
      security-events: write

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        if: inputs.staticAnalysis
        with:
          token: "${{secrets.GITHUB_TOKEN}}"
          fetch-depth: '0'
          persist-credentials: false

      #job
      - name: Run code analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-static-code-analysis@main
        if: inputs.staticAnalysis
        with:
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          language: ${{needs.Setup.outputs.Language}}


  #--------------------------------------------------#
  #                      Release                     # 
  #--------------------------------------------------#
  Release:
    runs-on: ubuntu-latest
    if: needs.Setup.outputs.Event == 'push'

    needs: 
      - Static-Analysis

    outputs:
      Version: ${{ steps.versioning.outputs.version }}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # persist-credentials: false

      - name: Setup | Pipeline config scrapper
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        id: analysis

      # release
      - name: Semantic Release
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-semantic-release@main
        if: inputs.autoVersioning
        with:
          writeSummary: true
          createRelease: false
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          installNode: true
          npmPlugin: false
          defaultBranch: ${{inputs.mainBranch}}
          author: ${{steps.analysis.outputs.commiter_name}} 
          email: ${{steps.analysis.outputs.commiter_email}}
          files: '[]'

      - name: Current Version
        id: versioning
        run: |
          echo "::set-output name=version::$(cat package.json | jq -r '.version')"
          echo -e "\n\nINFO  current version = $(cat package.json | jq -r '.version')\n\n"


  #--------------------------------------------------#
  #                      Trigger                     # 
  #--------------------------------------------------#
  Trigger-Build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    needs: 
      - Release

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PIPELINE_DEPLOY_TOKEN }}

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main

      - name: Trigger
        run: |
          git config --global user.name "${{steps.analysis.outputs.commiter_name}}"
          git config --global user.email "${{steps.analysis.outputs.commiter_email}}"
          git fetch
          git checkout -B env/dev
          git commit --allow-empty -am "deploy: to dev [skip ci]\\nVersion: ${{needs.Release.outputs.Version}}\nCommit: ${{steps.setup.outputs.commit_hash}}"
          git push -f -u origin env/dev

      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ secrets.PIPELINE_DEPLOY_TOKEN }}"
          environment: dev


  #--------------------------------------------------#
  #                  Trigger Manual                  # 
  #--------------------------------------------------#
  Trigger-Manual:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    needs: 
      - Setup

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PIPELINE_DEPLOY_TOKEN }}

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
  
      - name: Trigger
        run: |
          git config --global user.name "pipeline-bot"
          git config --global user.email "pipeline-bot"
          git fetch
          git checkout -B env/${{steps.analysis.outputs.environment}}
          git commit --allow-empty -am "deploy: to ${{steps.analysis.outputs.environment}} [skip ci]\nCommit: ${{steps.setup.outputs.commit_hash}}"
          git push -f -u origin env/${{steps.analysis.outputs.environment}}

      - uses: altinukshini/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ secrets.PIPELINE_DEPLOY_TOKEN }}"
          environment: ${{steps.analysis.outputs.environment}}


  #--------------------------------------------------#
  #                   Build Android                  # 
  #--------------------------------------------------#
  Build-Android:
    runs-on: ubuntu-latest
    if: github.event_name == 'deployment'

    needs: 
      - Setup

    steps:

      # pre-job
      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: env/${{needs.Setup.outputs.Environment}}

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      - name: Setup | Dependencies
        if: inputs.installNode
        uses: filipeforattini/ff-iac-github-actions/.github/actions/setup-binaries@main
        with:
          nodejs: 18
          java: 17

      # pre-build
      - name: Docs | Write summary title
        run: |
          echo "### ðŸš¢ Build Android" >> $GITHUB_STEP_SUMMARY

      - name: Install | Dependency managers
        run: npm -g install yarn npm

      # install dependencies
      - name: Install dependencies
        run: |
          if test -f ./package-lock.json; then npm ci --force --no-fund --no-audit; fi
          if test -f ./yarn.lock; then yarn install --frozen-lockfile --ignore-optional --immutable; fi

      # build
      - name: Copy config
        run: |
          if test -f ./manifests/configs/${{needs.Setup.outputs.Environment}}.env; then cp ./manifests/configs/${{needs.Setup.outputs.Environment}}.env ./.env; fi

      - name: Cache Gradle Wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - name: Build
        run: |
          cd ./android;
          ./gradlew build --no-daemon
          ./gradlew assembleRelease
          ./gradlew bundleRelease

      # release
      - name: Semantic Release
        uses: filipeforattini/ff-iac-github-actions/.github/actions/pack-semantic-release@main
        if: inputs.autoVersioning
        with:
          writeSummary: true
          createRelease: false
          token: "${{secrets.PIPELINE_DEPLOY_TOKEN}}"
          installNode: true
          npmPlugin: false
          defaultBranch: ${{inputs.mainBranch}}
          author: ${{steps.analysis.outputs.commiter_name}} 
          email: ${{steps.analysis.outputs.commiter_email}}
          files: '["./android/app/build/outputs/apk/release/app-release.apk", "./android/app/build/outputs/bundle/release/app-release.aab"]'


  #--------------------------------------------------#
  #                       Build                      # 
  #--------------------------------------------------#
  Build-iOS:
    runs-on: ubuntu-latest
    if: github.event_name == 'deployment'

    needs: 
      - Setup

    steps:

      # pre-job
      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: env/${{needs.Setup.outputs.Environment}}

      - name: Pipeline config scrapper
        id: analysis
        uses: filipeforattini/ff-iac-github-actions/.github/actions/config-scrapper@main
        with:
          containerRegistry: ${{inputs.containerRegistry}}

      # pre-build
      - name: Docs | Write summary title
        run: |
          echo "### ðŸš¢ Build iOS" >> $GITHUB_STEP_SUMMARY

      - name: Build
        run: |
          echo "coming soon"
          # yarn ios
