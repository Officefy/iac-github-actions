name: service-push

#--------------------------------------------------#
#                     Triggers                     # 
#--------------------------------------------------#
on:

  workflow_call:

    inputs:
      debug:
        type: boolean
        required: false
        default: false
        description: "Enable debug mode"
      mainBranch:
        type: string
        required: false
        default: master
        description: "Main repository branch may interfere with versioning"
      platforms:
        type: string
        required: false
        default: "linux/386,linux/amd64,linux/arm/v7,linux/arm/v8,linux/arm64,linux/ppc64le,linux/s390x"
      ecosystem:
        type: string
        required: false
      containerRegistry:
        type: string
        required: false
        default: ghcr.io
      environmentsAsNamespaces:
        type: boolean
        required: false
        default: false
      staticAnalysis:
        type: boolean
        required: false
        default: false
      autoVersioning:
        type: boolean
        required: false
        default: true
      mysqlEnabled:
        type: boolean
        required: false
        default: false

    outputs:
      PipelineConfig: 
        description: "Used pipeline config"
        value: ${{ jobs.Setup.outputs.PipelineConfig }}


#--------------------------------------------------#
#                  Workflow Jobs                   # 
#--------------------------------------------------#
jobs:

  #--------------------------------------------------#
  #                    Setup Jobs                    # 
  #--------------------------------------------------#
  Setup:
    runs-on: ubuntu-latest

    outputs:
      PipelineConfig: ${{ steps.script_setup.outputs.result }}
      BuildNode: ${{ steps.define_builders.outputs.build_node }}
      BuildPython: ${{ steps.define_builders.outputs.build_python }}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3

      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .ff
          repository: filipeforattini/ff-iac-github-actions

      # job
      - name: Config | Pipeline config scrapper
        uses: actions/github-script@v6
        id: script_setup
        with:
          result-encoding: string
          script: |
            return require('./.ff/src/steps/config-scrapper')({ 
              context, 
              inputs: {
                containerRegistry: "${{ inputs.containerRegistry }}",
              },
            })

      - name: Config | Define pipeline paths
        env:
          PIPELINE_SETUP: ${{ steps.script_setup.outputs.result}}
        id: define_builders
        run: |
          echo "::set-output name=build_node::$(echo $PIPELINE_SETUP | jq -r '.code.isNode')"
          echo "::set-output name=build_python::$(echo $PIPELINE_SETUP | jq -r '.code.isPython')"

      - name: Debug | Show pipeline config
        if: inputs.debug == true
        env:
          PIPELINE_SETUP: ${{ steps.script_setup.outputs.result}}
        run: echo $PIPELINE_SETUP

      - name: Docs | Summary
        env:
          PIPELINE_SETUP: ${{ steps.script_setup.outputs.result}}
        run: | 
          echo -e "### $(echo $PIPELINE_SETUP | jq -r '.deploy.podName')\n\n" >> $GITHUB_STEP_SUMMARY
          echo -e "<details><summary>Config</summary>\n\n\`\`\`json \n$(echo $PIPELINE_SETUP | jq '.')\n \`\`\`\n </details>\n\n" >> $GITHUB_STEP_SUMMARY
          echo -e "---\n\n" >> $GITHUB_STEP_SUMMARY
          echo -e "Build started at: $(echo $PIPELINE_SETUP | jq -r '.run.startedAt')\n\n" >> $GITHUB_STEP_SUMMARY


  #--------------------------------------------------#
  #                  Static Analysis                 # 
  #--------------------------------------------------#
  Static-Analysis:
    runs-on: ubuntu-latest
    needs: Setup

    permissions:
      security-events: write

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          persist-credentials: false

      #job
      - name: Run GitLeaks scanner
        if: inputs.staticAnalysis == true
        uses: docker://opendevsecops/gitleaks
        with:
          args: --repo=https://github.com/${{github.repository}}

      - name: Run Trivy scanner
        if: inputs.staticAnalysis == true
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        if: inputs.staticAnalysis == true
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run OSSAR
        if: inputs.staticAnalysis == true
        uses: github/ossar-action@v1
        id: ossar

      - name: Upload OSSAR results
        if: inputs.staticAnalysis == true
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.ossar.outputs.sarifFile }}

      #node
      - name: Setup CodeQL for Javascript
        if: inputs.staticAnalysis == true && needs.Setup.outputs.BuildNode == 'true'
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Run Javascript CodeQL Analysis
        if: inputs.staticAnalysis == true && needs.Setup.outputs.BuildNode == 'true'
        uses: github/codeql-action/analyze@v2

      #python
      - name: Setup CodeQL for Python
        if: inputs.staticAnalysis == true && needs.Setup.outputs.BuildPython == 'true'
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Run Python CodeQL Analysis
        if: inputs.staticAnalysis == true && needs.Setup.outputs.BuildPython == 'true'
        uses: github/codeql-action/analyze@v2


  #--------------------------------------------------#
  #                  Tests: Node.js                  # 
  #--------------------------------------------------#
  Tests-Node:
    runs-on: ubuntu-latest
    needs: Setup
    if: needs.Setup.outputs.BuildNode == 'true'

    permissions:
      security-events: write

    strategy:
      matrix:
        node-version: [ 14, 17 ]
    
    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3

      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .ff
          repository: filipeforattini/ff-iac-github-actions

      - name: Install | Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Config | Load setup configs
        env:
          PIPELINE_SETUP: ${{ needs.Setup.outputs.PipelineConfig }}
        id: node_setup
        run: |
          echo "::set-output name=cache_key::$(echo $PIPELINE_SETUP | jq -r '.code.cacheKey')"
          echo "::set-output name=dependency_command::$(echo $PIPELINE_SETUP | jq -r '.code.dependencyCommand')"

      # load caches
      - name: Load cache from yarn.lock
        uses: actions/cache@v2
        if: steps.node_setup.outputs.cache_key == 'yarn.lock'
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Load cache from package-lock.json
        uses: actions/cache@v2
        if: steps.node_setup.outputs.cache_key == 'package-lock.json'
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Load cache from package.json
        uses: actions/cache@v2
        if: steps.node_setup.outputs.cache_key == 'package-lock.json'
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package.json') }}

      # install dependencies
      - name: Install dependencies
        run: ${{ steps.node_setup.outputs.dependency_command }}

      # run scripts
      - name: Run linter
        run: npm run lint --if-present

      - name: Run tests
        run: npm run test --if-present


  #--------------------------------------------------#
  #                  Tests: Python                   # 
  #--------------------------------------------------#
  Tests-Python:
    runs-on: ubuntu-latest
    needs: Setup
    if: |
      github.event_name == 'push'
      && needs.Setup.outputs.BuildPython == 'true'

    strategy:
      matrix:
        python: [3.7, 3.8, 3.9]
    
    steps:
      - uses: actions/checkout@v3

      - name: Pip install
        run: pip install -r requirements.txt


  #--------------------------------------------------#
  #                     Release                      # 
  #--------------------------------------------------#
  Release-Node:
    runs-on: ubuntu-latest
    needs: 
      - Setup
      - Tests-Node
      - Static-Analysis

    outputs:
      Version: ${{ steps.versioning.outputs.version }}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .ff
          repository: filipeforattini/ff-iac-github-actions

      - name: Config | Load setup configs
        env:
          PIPELINE_SETUP: ${{ needs.Setup.outputs.PipelineConfig }}
        id: node_setup
        run: echo "::set-output name=has_releaserc::$(echo $PIPELINE_SETUP | jq -r '.git.hasReleaserc')"

      # release
      - name: Config | Create .releaserc.json
        uses: actions/github-script@v6
        if: inputs.autoVersioning == true && steps.node_setup.outputs.has_releaserc == 'false'
        with:
          result-encoding: string
          script: |
            return require('./.ff/src/steps/generate-releaserc')({
              defaultBranch: "${{ inputs.mainBranch }}",
              files: [ 
                'package.json',
                'dist/**/*.{js,css,py}',
              ]
            })

      - name: Debug | Print .releaserc.json
        if: inputs.autoVersioning == true && inputs.debug == true
        run: cat .releaserc.json

      - name: Semantic Release
        if: inputs.autoVersioning == true
        id: versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm i -g -D \
            semantic-release \
            @semantic-release/git \
            @semantic-release/npm \
            @semantic-release/github \
            @semantic-release/changelog \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator
          echo -e "\n\nINFO  semantic-release version = $(semantic-release -v)\n\n"
          semantic-release
          echo "::set-output name=version::$(cat package.json | jq -r '.version')"
          echo -e "\n\nINFO  current version = $(cat package.json | jq -r '.version')\n\n"


  #--------------------------------------------------#
  #                  Build: Node.js                  # 
  #--------------------------------------------------#
  Build-Node:
    runs-on: ubuntu-latest
    needs: 
      - Setup
      - Release-Node

    strategy:
      matrix:
        node-version: [ 14, 17 ]

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3

      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .ff
          repository: filipeforattini/ff-iac-github-actions

      - name: Install | QEMU
        uses: docker/setup-qemu-action@v1

      - name: Install | Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true

      - name: Config | Load setup configs
        env:
          PIPELINE_SETUP: ${{ needs.Setup.outputs.PipelineConfig }}
        id: node_setup
        run: |
          echo "::set-output name=cache_key::$(echo $PIPELINE_SETUP | jq -r '.code.cacheKey')"
          echo "::set-output name=dependency_command::$(echo $PIPELINE_SETUP | jq -r '.code.dependencyCommand')"
          echo "::set-output name=has_releaserc::$(echo $PIPELINE_SETUP | jq -r '.git.hasReleaserc')"
          echo "::set-output name=has_dockerfile::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.hasDockerfile')"
          echo "::set-output name=has_dockerignore::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.hasDockerignore')"
          echo "::set-output name=docker_command::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.command')"
          echo "::set-output name=docker_entrypoint::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.entrypoint')"
          echo "::set-output name=docker_dependency_command::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.dependencyCommand')"
          echo "::set-output name=docker_image_fullname::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.imageFullname')"
          echo "::set-output name=docker_image_tags::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.tagsAsString')"
          echo "::set-output name=docker_main_image::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.mainImage')"
          echo "::set-output name=deploy_repository::$(echo $PIPELINE_SETUP | jq -r '.deploy.repository')"

      # pre-build
      - name: Config | Create .dockerignore
        uses: actions/github-script@v6
        if: steps.node_setup.outputs.has_dockerignore == 'false'
        with:
          result-encoding: string
          script: |
            return require('./.ff/src/steps/generate-dockerignore')({ 
              assetsToIgnore: ['node_modules'],
            })

      - name: Config | Create Dockerfile
        uses: actions/github-script@v6
        if: steps.node_setup.outputs.has_dockerfile == 'false'
        with:
          result-encoding: string
          script: |
            return require('./.ff/src/steps/generate-dockerfile')({ 
              image: 'node',
              tag: '${{ matrix.node-version }}-alpine',
              command: '${{ steps.node_setup.outputs.docker_command }}',
              entrypoint: '${{ steps.node_setup.outputs.docker_entrypoint }}',
              dependencyCommand: '${{ steps.node_setup.outputs.docker_dependency_command }}',
              labels: [ 
                'archtecture=alpine', 
                'node-version=${{ matrix.node-version }}', 
                'version=${{ needs.Release-Node.outputs.Version }}', 
              ],
            })

      - name: Config | Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.containerRegistry }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
            
      # build
      - name: Dockerfile lint
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: Dockerfile

      - name: Docs | Lint result
        run: | 
          echo "Hadolint: \`${{ steps.hadolint.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`$HADOLINT_RESULTS\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Build image test
        if: inputs.staticAnalysis == true
        uses: docker/build-push-action@v2
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=./dockerimage-node-${{ matrix.node-version }}.tar

      - name: Run Trivy scanner
        if: inputs.staticAnalysis == true
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          input: ./dockerimage-node-${{ matrix.node-version }}.tar
          format: 'sarif'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        if: inputs.staticAnalysis == true
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: ${{ inputs.platforms }}
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{steps.node_setup.outputs.docker_image_tags}}, ${{steps.node_setup.outputs.docker_image_fullname}}:${{needs.Release-Node.outputs.Version}}
          labels: "organization: ${{github.repository_owner}}, repository: ${{github.repository}}, branch: ${{needs.Setup.outputs.Branch}}, commit: ${{needs.Setup.outputs.ShaHash}}, date: ${{needs.Setup.outputs.Date}}, timestamp: ${{needs.Setup.outputs.Timestamp}}"
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache


  #--------------------------------------------------#
  #                      Deploy                      # 
  #--------------------------------------------------#
  Deploy:
    environment: dev
    runs-on: ubuntu-latest

    needs:
      - Setup
      - Release-Node
      - Build-Node

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3

      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .ff
          repository: filipeforattini/ff-iac-github-actions

      - name: Setup | Kubectl
        uses: azure/setup-kubectl@v2.0

      - name: Install | YTT
        uses: vmware-tanzu/carvel-setup-action@v1
        with:
          only: ytt
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install | QEMU
        uses: docker/setup-qemu-action@v1

      - name: Install | Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Config | Load setup configs
        env:
          ENVIRONMENTS_AS_NAMESPACES: ${{ inputs.environmentsAsNamespaces }}
          PIPELINE_SETUP: ${{ needs.Setup.outputs.PipelineConfig }}
        id: deploy_setup
        run: |
          echo "::set-output name=deploy_as_k8s::$(echo $PIPELINE_SETUP | jq -r '.deploy.deployAsK8s')"
          echo "::set-output name=deploy_as_chart::$(echo $PIPELINE_SETUP | jq -r '.deploy.deployAsChart')"
          echo "::set-output name=has_dev_secrets::$(echo $PIPELINE_SETUP | jq -r '.deploy.secrets.dev')"
          echo "::set-output name=has_dev_configs::$(echo $PIPELINE_SETUP | jq -r '.deploy.configs.dev')"
          echo "::set-output name=deploy_ecosystem::$(echo $PIPELINE_SETUP | jq -r '.deploy.ecosystem')"
          echo "::set-output name=deploy_organization::$(echo $PIPELINE_SETUP | jq -r '.deploy.organization')"
          echo "::set-output name=deploy_container_registry::$(echo $PIPELINE_SETUP | jq -r '.deploy.containerRegistry')"
          echo "::set-output name=deploy_repository::$(echo $PIPELINE_SETUP | jq -r '.deploy.repository')"
          echo "::set-output name=deploy_tag::$(echo $PIPELINE_SETUP | jq -r '.deploy.commitTag')"
          echo "::set-output name=run_started_at::$(echo $PIPELINE_SETUP | jq -r '.run.startedAt')"
          case $ENVIRONMENTS_AS_NAMESPACES in
            true)  echo "::set-output name=deploy_namespace::$(echo $PIPELINE_SETUP | jq -r '.deploy.namespaces.dev')";;
            false) echo "::set-output name=deploy_namespace::$(echo $PIPELINE_SETUP | jq -r '.deploy.namespace')";;
            *)     echo "::set-output name=deploy_namespace::$(echo $PIPELINE_SETUP | jq -r '.deploy.namespace')";;
          esac

      - name: Config | Kubectl config file
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p ~/.kube
          echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config

      # deploy
      - name: K8s create namespace
        run: kubectl create namespace ${{steps.deploy_setup.outputs.deploy_namespace}} --dry-run=client --validate=false --output=yaml | kubectl apply -f -

      # configs
      - name: K8s create config-map
        if: steps.deploy_setup.outputs.has_dev_configs == 'true'
        run: |
          kubectl create configmap -n ${{steps.deploy_setup.outputs.deploy_namespace}} svc --from-env-file=./manifests/configs/dev.env --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl create configmap -n ${{steps.deploy_setup.outputs.deploy_namespace}} svc-${{needs.Release-Node.outputs.Version}} --from-env-file=./manifests/configs/dev.env --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl get configmap -n ${{steps.deploy_setup.outputs.deploy_namespace}} svc -o jsonpath='{.data}' > ./manifests/k8s-configs-keys.txt
          cat ./manifests/k8s-configs-keys.txt | jq -r 'keys[]' |  tr '\n' '~' | sed 's/~/,/g;s/,$//' > ./manifests/k8s-configs-keys.txt

      - name: Debug | Configs keys injected
        if: inputs.debug == true
        run: echo -e "k8s-configs-keys.txt:\n\n$(cat ./manifests/k8s-configs-keys.txt)"

      # secrets
      - name: Decrypt DEV secrets
        if: steps.deploy_setup.outputs.has_dev_secrets == 'true'
        run: |
          gpg \
            --yes --batch --quiet --decrypt \
            --passphrase="${{ secrets.GPG_PASSPHRASE }}" \
            --output ./manifests/k8s-secrets.env \
            ./manifests/secrets/dev.gpg

      - name: K8s create secrets
        if: steps.deploy_setup.outputs.has_dev_secrets == 'true'
        run: |
          kubectl create secret generic -n ${{steps.deploy_setup.outputs.deploy_namespace}} svc --from-env-file=./manifests/k8s-secrets.env --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl create secret generic -n ${{steps.deploy_setup.outputs.deploy_namespace}} svc-${{needs.Release-Node.outputs.Version}} --from-env-file=./manifests/k8s-secrets.env --dry-run=client --validate=false --output=yaml | kubectl apply -f -
          kubectl get secret -n ${{steps.deploy_setup.outputs.deploy_namespace}} svc -o jsonpath='{.data}' | base64 > ./manifests/k8s-secrets-keys.txt
          cat ./manifests/k8s-secrets-keys.txt | base64 -d | jq -r 'keys[]' |  tr '\n' '~' | sed 's/~/,/g;s/,$//' > ./manifests/k8s-secrets-keys.txt

      - name: Debug | Secret keys injected
        if: inputs.debug == true
        run: echo -e "k8s-secrets-keys.txt:\n\n$(cat ./manifests/k8s-secrets-keys.txt)"

      # secrets for registry auth
      - name: Config | Login to Container Registry
        uses: docker/login-action@v2
        with:
          logout: false
          registry: ${{ inputs.containerRegistry }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Config | Gives runner access to docker config file 
        if: steps.deploy_setup.outputs.deploy_as_k8s == 'true'
        run: |
          sudo chown $(whoami):docker /home/$(whoami)/.docker/config.json
          cp /home/$(whoami)/.docker/config.json ./manifests/docker-config.json

      - name: K8s create registry-token secret
        if: steps.deploy_setup.outputs.deploy_as_k8s == 'true'
        run: kubectl create secret generic -n ${{steps.deploy_setup.outputs.deploy_namespace}} registry-token --type=kubernetes.io/dockerconfigjson --from-file=.dockerconfigjson=./manifests/docker-config.json --dry-run=client --validate=false --output=yaml | kubectl apply -f -

      # generate k8s manifests
      - name: K8s generates final yml
        if: steps.deploy_setup.outputs.deploy_as_k8s == 'true'
        run: |
          ytt \
            -f ./.ff/deploy/as-k8s/service.schema.yml \
            -f ./.ff/deploy/as-k8s/service.yml \
            -f ./manifests/k8s-values.yml \
            --data-value ecosystem=${{steps.deploy_setup.outputs.deploy_ecosystem}} \
            --data-value organization=${{steps.deploy_setup.outputs.deploy_organization}} \
            --data-value repository=${{steps.deploy_setup.outputs.deploy_repository}} \
            --data-value containerRegistry=${{steps.deploy_setup.outputs.deploy_container_registry}} \
            --data-value tag=${{steps.deploy_setup.outputs.deploy_tag}} \
            --data-value-yaml deployment.imagePullSecrets=true \
            --data-value-yaml envFromSecrets="[$(cat ./manifests/k8s-secrets-keys.txt)]" \
            --data-value-yaml envFromConfigMaps="[$(cat ./manifests/k8s-configs-keys.txt)]" \
            --data-value pipelineControl.datetime=${{steps.deploy_setup.outputs.run_started_at}} \
            --data-value-yaml pipelineControl.environmentsAsNamespaces=${{inputs.environmentsAsNamespaces}} \
              > ./manifests/k8s-to-apply.yml

      - name: Debug | Print k8s-to-apply.yml
        if: inputs.debug == true
        run: echo -e "./k8s-to-apply.yml:\n\n$(cat ./manifests/k8s-to-apply.yml)"

      - name: K8s apply yml
        if: steps.deploy_setup.outputs.deploy_as_k8s == 'true'
        run: |
          kubectl apply -f ./manifests/k8s-to-apply.yml
          kubectl get pods -n ${{steps.deploy_setup.outputs.deploy_repository}}
