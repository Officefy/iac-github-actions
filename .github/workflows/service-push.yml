name: service

on:
  workflow_call:
    inputs:
      mainBranch:
        type: string
        required: false
        default: master
      ecosystem:
        type: string
        required: false
      containerRegistry:
        type: string
        required: false
        default: ghcr.io

      mysqlEnabled:
        type: boolean
        required: false
        default: false

    secrets:
      KUBE_CONFIG:
        required: true
      GPG_PRIVATE_KEY:
        required: false
      GPG_DEV_PASSPHRASE:
        required: false
      GPG_STG_PASSPHRASE:
        required: false
      GPG_PRD_PASSPHRASE:
        required: false

    outputs:
      PipelineConfig: 
        description: "Used pipeline config"
        value: ${{ jobs.Setup.outputs.PipelineConfig }}

jobs:


  #--------------------------------------------------#
  #                    Setup Jobs                    # 
  #--------------------------------------------------#
  Setup:
    runs-on: ubuntu-latest

    outputs:
      PipelineConfig: ${{ steps.script_setup.outputs.result }}
      BuildNode: ${{ steps.define_builders.outputs.build_node }}
      BuildPython: ${{ steps.define_builders.outputs.build_python }}

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3

      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .ff
          repository: filipeforattini/ff-iac-github-actions

      - name: Config | Pipeline config scrapper
        uses: actions/github-script@v6
        id: script_setup
        with:
          result-encoding: string
          script: |
            return require('./.ff/src/steps/config-scrapper')({ 
              context, 
              inputs: { 
                containerRegistry: "${{ inputs.containerRegistry }}",
              },
            })

      - name: Config | Define pipeline paths
        env:
          PIPELINE_SETUP: ${{ steps.script_setup.outputs.result}}
        id: define_builders
        run: |
          echo "::set-output name=build_node::$(echo $PIPELINE_SETUP | jq -r '.code.isNode')"
          echo "::set-output name=build_python::$(echo $PIPELINE_SETUP | jq -r '.code.isPython')"
          echo $PIPELINE_SETUP


  #--------------------------------------------------#
  #                  Tests: Node.js                  # 
  #--------------------------------------------------#
  Tests-Node:
    runs-on: ubuntu-latest
    needs: Setup
    if: needs.Setup.outputs.BuildNode == 'true'

    strategy:
      matrix:
        node-version: [16, 17]
    
    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3

      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .ff
          repository: filipeforattini/ff-iac-github-actions

      - name: Config | Load setup configs
        env:
          PIPELINE_SETUP: ${{ needs.Setup.outputs.PipelineConfig }}
        id: node_setup
        run: |
          echo "::set-output name=cache_key::$(echo $PIPELINE_SETUP | jq -r '.code.cacheKey')"
          echo "::set-output name=dependency_command::$(echo $PIPELINE_SETUP | jq -r '.code.dependencyCommand')"

      # install node
      - name: Install | Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # load caches
      - name: Load cache from yarn.lock
        uses: actions/cache@v2
        if: steps.node_setup.outputs.cache_key == 'yarn.lock'
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Load cache from package-lock.json
        uses: actions/cache@v2
        if: steps.node_setup.outputs.cache_key == 'package-lock.json'
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Load cache from package.json
        uses: actions/cache@v2
        if: steps.node_setup.outputs.cache_key == 'package-lock.json'
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package.json') }}

      # install dependencies
      - name: Install dependencies
        run: ${{ steps.node_setup.outputs.dependency_command }}

      # run scripts
      - run: npm run lint --if-present
      - run: npm run test --if-present


  #--------------------------------------------------#
  #                  Tests: Python                   # 
  #--------------------------------------------------#
  Tests-Python:
    runs-on: ubuntu-latest
    needs: Setup
    if: |
      github.event_name == 'push'
      && needs.Setup.outputs.BuildPython == 'true'

    strategy:
      matrix:
        python: [3.7, 3.8, 3.9]
    
    steps:
      - uses: actions/checkout@v3

      - name: Pip install
        run: pip install -r requirements.txt


  #--------------------------------------------------#
  #                     Release                      # 
  #--------------------------------------------------#
  Release-Node:
    runs-on: ubuntu-latest
    needs: 
      - Setup
      - Tests-Node

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .ff
          repository: filipeforattini/ff-iac-github-actions

      - name: Config | Load setup configs
        env:
          PIPELINE_SETUP: ${{ needs.Setup.outputs.PipelineConfig }}
        id: node_setup
        run: |
          echo "::set-output name=has_releaserc::$(echo $PIPELINE_SETUP | jq -r '.git.hasReleaserc')"

      # release
      - name: Config | Create .releaserc.json
        uses: actions/github-script@v6
        if: steps.node_setup.outputs.has_releaserc == 'false'
        with:
          result-encoding: string
          script: |
            return require('./.ff/src/steps/generate-releaserc')({
              defaultBranch: "${{ inputs.mainBranch }}",
              files: [ 
                'package.json',
                'dist/**/*.{js,css,py}',
              ]
            })

      - name: DEBUG | Print .releaserc.json
        run: cat .releaserc.json

      - name: Semantic Release dependencies
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm i -g -D \
            semantic-release \
            @semantic-release/git \
            @semantic-release/npm \
            @semantic-release/github \
            @semantic-release/changelog \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator
          semantic-release -v
          semantic-release


  #--------------------------------------------------#
  #                  Build: Node.js                  # 
  #--------------------------------------------------#
  Build-Node:
    runs-on: ubuntu-latest
    needs: 
      - Setup
      - Release-Node

    strategy:
      matrix:
        node-version: [16]

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3

      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .ff
          repository: filipeforattini/ff-iac-github-actions

      - name: Config | Load setup configs
        env:
          PIPELINE_SETUP: ${{ needs.Setup.outputs.PipelineConfig }}
        id: node_setup
        run: |
          echo "::set-output name=cache_key::$(echo $PIPELINE_SETUP | jq -r '.code.cacheKey')"
          echo "::set-output name=dependency_command::$(echo $PIPELINE_SETUP | jq -r '.code.dependencyCommand')"
          echo "::set-output name=has_releaserc::$(echo $PIPELINE_SETUP | jq -r '.git.hasReleaserc')"
          echo "::set-output name=has_dockerfile::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.hasDockerfile')"
          echo "::set-output name=has_dockerignore::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.hasDockerignore')"
          echo "::set-output name=docker_command::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.command')"
          echo "::set-output name=docker_entrypoint::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.entrypoint')"
          echo "::set-output name=docker_dependency_command::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.dependencyCommand')"
          echo "::set-output name=docker_image_tags::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.tagsAsString')"
          echo "::set-output name=docker_main_image::$(echo $PIPELINE_SETUP | jq -r '.dockerfile.mainImage')"

      # pre-build
      - name: Config | Create .dockerignore
        uses: actions/github-script@v6
        if: steps.node_setup.outputs.has_dockerignore == 'false'
        with:
          result-encoding: string
          script: |
            return require('./.ff/src/steps/generate-dockerignore')({ 
              assetsToIgnore: ['node_modules'],
            })

      - name: Config | Create Dockerfile
        uses: actions/github-script@v6
        if: steps.node_setup.outputs.has_dockerfile == 'false'
        with:
          result-encoding: string
          script: |
            return require('./.ff/src/steps/generate-dockerfile')({ 
              image: 'node',
              tag: '${{ matrix.node-version }}-alpine',
              labels: [ 'node-version=${{ matrix.node-version }}', 'archtecture=alpine' ],
              dependencyCommand: '${{ steps.node_setup.outputs.docker_dependency_command }}',
              entrypoint: '${{ steps.node_setup.outputs.docker_entrypoint }}',
              command: '${{ steps.node_setup.outputs.docker_command }}',
            })
            
      - name: Dockerfile lint
        uses: hadolint/hadolint-action@v2.0.0
        with:
          dockerfile: Dockerfile

      # build
      - name: Setup | Install QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Config | Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{steps.node_setup.outputs.docker_image_tags}}
          labels: "organization: ${{github.repository_owner}}, repository: ${{github.repository}}, branch: ${{needs.Setup.outputs.Branch}}, commit: ${{needs.Setup.outputs.ShaHash}}, date: ${{needs.Setup.outputs.Date}}, timestamp: ${{needs.Setup.outputs.Timestamp}}"

      - name: Trace | List docker images
        run: docker images

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   env:
      #     TRIVY_NON_SSL: true
      #   with:
      #     image-ref: '${{ steps.node_setup.outputs.docker_main_image }}'
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v1
      #   with:
      #     sarif_file: 'trivy-results.sarif'

  #--------------------------------------------------#
  #                      Deploy                      # 
  #--------------------------------------------------#
  Deploy:
    runs-on: ubuntu-latest
    environment: dev
    needs:
      - Setup
      - Build-Node

    steps:

      # pre-job
      - name: Setup | Cloning repository
        uses: actions/checkout@v3

      - name: Setup | Cloning tools
        uses: actions/checkout@v3
        with:
          ref: main
          path: .ff
          repository: filipeforattini/ff-iac-github-actions

      - name: Config | Load setup configs
        env:
          PIPELINE_SETUP: ${{ needs.Setup.outputs.PipelineConfig }}
        id: deploy_setup
        run: |
          echo "::set-output name=deploy_as_k8s::$(echo $PIPELINE_SETUP | jq -r '.deploy.deployAsK8s')"
          echo "::set-output name=deploy_as_chart::$(echo $PIPELINE_SETUP | jq -r '.deploy.deployAsChart')"
          echo "::set-output name=has_dev_secrets::$(echo $PIPELINE_SETUP | jq -r '.deploy.hasDevSecrets')"
          echo "::set-output name=deploy_ecosystem::$(echo $PIPELINE_SETUP | jq -r '.deploy.ecosystem')"
          echo "::set-output name=deploy_organization::$(echo $PIPELINE_SETUP | jq -r '.deploy.organization')"
          echo "::set-output name=deploy_container_registry::$(echo $PIPELINE_SETUP | jq -r '.deploy.containerRegistry')"
          echo "::set-output name=deploy_repository::$(echo $PIPELINE_SETUP | jq -r '.deploy.repository')"
          echo "::set-output name=deploy_tag::$(echo $PIPELINE_SETUP | jq -r '.deploy.tag')"

      # deploy
      # - name: Config | Import GPG key
      #   if: steps.deploy_setup.outputs.has_dev_secrets == 'true'
      #   uses: hashicorp/ghaction-import-gpg@v2.1.0
      #   env:
      #     GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      #     PASSPHRASE: ${{ secrets.GPG_DEV_PASSPHRASE }}

      - name: Decrypt Dev Secrets
        run: |
          gpg --list-keys
          gpg --yes --batch --quiet --decrypt --passphrase="${{ secrets.GPG_DEV_PASSPHRASE }}" --output ./manifests/k8s-secrets.env ./manifests/secrets/dev.gpg
          cat ./manifests/k8s-secrets.env

      - name: Install | YTT
        uses: vmware-tanzu/carvel-setup-action@v1
        with:
          only: ytt
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create K8s secrets
        if: steps.deploy_setup.outputs.deploy_as_k8s == 'true'
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: create secret generic svc --from-file=./manifests/k8s-secrets.env

      - name: Generates Kubernetes YAML
        if: steps.deploy_setup.outputs.deploy_as_k8s == 'true'
        run: |
          ytt \
            -f ./.ff/deploy/as-k8s/service.schema.yml \
            -f ./.ff/deploy/as-k8s/service.yml \
            -f ./manifests/k8s-values.yml \
            --data-value ecosystem=${{steps.deploy_setup.outputs.deploy_ecosystem}} \
            --data-value organization=${{steps.deploy_setup.outputs.deploy_organization}} \
            --data-value containerRegistry=${{steps.deploy_setup.outputs.deploy_container_registry}} \
            --data-value repository=${{steps.deploy_setup.outputs.deploy_repository}} \
            --data-value tag=${{steps.deploy_setup.outputs.deploy_tag}} \
              > ./manifests/k8s-to-apply.yml
          cat ./manifests/k8s-to-apply.yml

      - name: Apply Kubernetes YAML
        if: steps.deploy_setup.outputs.deploy_as_k8s == 'true'
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: apply -f ./manifests/k8s-to-apply.yml

      - name: Get current state
        if: steps.deploy_setup.outputs.deploy_as_k8s == 'true'
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: get pods -n ${{steps.deploy_setup.outputs.deploy_repository}}
