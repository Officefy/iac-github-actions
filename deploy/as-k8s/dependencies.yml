#@ load("@ytt:data", "data")
#@ load("@ytt:json", "json")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:sha256", "sha256")
#@ load("@ytt:struct", "struct")

#@ def ListToMap (listOfMaps):
#@    newMap = {}
#@    for i in range(len(listOfMaps)):
#@        newMap.update({ listOfMaps[i].name: listOfMaps[i].value })
#@    end
#@    return newMap
#@ end

---
#@  dependencies = []
#@  depNames = ["mysql", "postgres", "rabbitmq", "elasticsearch", "redis", "nats", "etcd"]
#@  for i in range(len(depNames)):
#@    if data.values[depNames[i]].enabled:
#@      dependencies.extend([depNames[i]])
#@    end
#@  end
dependencies: #@ ",".join(dependencies)
dependenciesAsJson: #@ json.encode(dependencies)

mysql:
  enabled: #@ data.values.mysql.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.mysql))
    config: #@ base64.encode(json.encode(data.values.mysql))
    version: #@ data.values.mysql.version
    chart: #@ data.values.mysql.chart
    secrets:
      - auth.existingSecret
    secretKeys:
      - mysql-password
      - mysql-root-password
      - mysql-replication-password
    connection:
      protocol: "mysql://"
      port: 3306 
      serviceName: dep-mysql
      username: #@ data.values.repository
      database: #@ "/{}".format(data.values.repository)
      secret: mysql-password
  
  #@  mysqlValues = {}
  #@  mysqlValues.update(data.values.mysql.values)
  #@  mysqlValues = struct.encode(mysqlValues)
  #@  mysqlValues = struct.decode(mysqlValues)

  #@  mysqAuth = mysqlValues.get("auth")
  #@  mysqAuth.update({ 
  #@    "database": data.values.repository,
  #@    "username": data.values.repository,
  #@  })
  #@  mysqPrimary = mysqlValues.get("primary")
  #@  mysqPrimary.update({
  #@    "nodeSelector": ListToMap(data.values.mysql.values.primary.nodeSelector),
  #@    "resources": {
  #@      "limits": ListToMap(data.values.mysql.values.primary.resources.limits),
  #@      "requests": ListToMap(data.values.mysql.values.primary.resources.requests),
  #@    },
  #@  })
  values: #@ mysqlValues

postgres:
  enabled: #@ data.values.postgres.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.postgres))
    config: #@ base64.encode(json.encode(data.values.postgres))
    version: #@ data.values.postgres.version
    chart: #@ data.values.postgres.chart
    secrets: 
      - global.postgresql.auth.existingSecret
    secretKeys:
      - password
      - postgres-password
      - replication-password
    connection:
      protocol: "postgresql://"
      port: 5432 
      serviceName: dep-postgres-postgresql
      username: #@ data.values.repository
      database: #@ "/{}".format(data.values.repository)
      secret: password
  
  #@  postgresValues = {}
  #@  postgresValues.update(data.values.postgres.values)
  #@  postgresValues = struct.encode(postgresValues)
  #@  postgresValues = struct.decode(postgresValues)

  #@  postgresAuth = postgresValues.get("auth")
  #@  postgresAuth.update({
  #@    "database": data.values.repository,
  #@    "username": data.values.repository
  #@  })
  #@  postgresPrimary = postgresValues.get("primary")
  #@  postgresPrimary.update({
  #@    "nodeSelector": ListToMap(data.values.postgres.values.primary.nodeSelector),
  #@    "resources": {
  #@      "limits": ListToMap(data.values.postgres.values.primary.resources.limits),
  #@      "requests": ListToMap(data.values.postgres.values.primary.resources.requests),
  #@    },
  #@ })
  values: #@ postgresValues

rabbitmq:
  enabled: #@ data.values.rabbitmq.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.rabbitmq))
    config: #@ base64.encode(json.encode(data.values.rabbitmq))
    version: #@ data.values.rabbitmq.version
    chart: #@ data.values.rabbitmq.chart
    secrets: 
      - auth.existingPasswordSecret
      - auth.existingErlangSecret
    secretKeys:
      - rabbitmq-password
      - rabbitmq-erlang-cookie
    connection:
      protocol: "amqp://"
      port: 5672 
      serviceName: dep-rabbitmq
      username: #@ data.values.repository
      database: ""
      secret: rabbitmq-password

  #@  rabbitmqValues = {}
  #@  rabbitmqValues.update(data.values.rabbitmq.values)
  #@  rabbitmqValues = struct.encode(rabbitmqValues)
  #@  rabbitmqValues = struct.decode(rabbitmqValues)

  #@  rabbitmqAuth = rabbitmqValues.get("auth")
  #@  rabbitmqAuth.update({
  #@    "username": data.values.repository
  #@  })

  #@  rabbitmqValues.update({ 
  #@    "nodeSelector": ListToMap(data.values.rabbitmq.values.nodeSelector),
  #@    "resources": {
  #@      "limits": ListToMap(data.values.rabbitmq.values.resources.limits),
  #@      "requests": ListToMap(data.values.rabbitmq.values.resources.requests),
  #@    },
  #@ })
  values: #@ rabbitmqValues

elasticsearch:
  enabled: #@ data.values.elasticsearch.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.elasticsearch))
    config: #@ base64.encode(json.encode(data.values.elasticsearch))
    version: #@ data.values.elasticsearch.version
    chart: #@ data.values.elasticsearch.chart
    secrets: []
    secretKeys: []
    connection:
      protocol: "http://"
      port: 9200
      serviceName: dep-elasticsearch
      username: ""
      database: ""
      secret: ""

  #@  elasticsearchValues = {}
  #@  elasticsearchValues.update(data.values.elasticsearch.values)
  #@  elasticsearchValues = struct.encode(elasticsearchValues)
  #@  elasticsearchValues = struct.decode(elasticsearchValues)

  #@  elasticsearchCoordinating = elasticsearchValues.get("coordinating")
  #@  elasticsearchCoordinating.update({
  #@    "nodeSelector": ListToMap(data.values.elasticsearch.values.coordinating.nodeSelector),
  #@    "resources": {
  #@      "limits": ListToMap(data.values.elasticsearch.values.coordinating.resources.limits),
  #@      "requests": ListToMap(data.values.elasticsearch.values.coordinating.resources.requests),
  #@    },
  #@  })
  #@  elasticsearchCurator = elasticsearchValues.get("curator")
  #@  elasticsearchCurator.update({
  #@    "nodeSelector": ListToMap(data.values.elasticsearch.values.curator.nodeSelector),
  #@    "resources": {
  #@      "limits": ListToMap(data.values.elasticsearch.values.curator.resources.limits),
  #@      "requests": ListToMap(data.values.elasticsearch.values.curator.resources.requests),
  #@    },
  #@  })
  #@  elasticsearchData = elasticsearchValues.get("data")
  #@  elasticsearchData.update({
  #@    "nodeSelector": ListToMap(data.values.elasticsearch.values.data.nodeSelector),
  #@    "resources": {
  #@      "limits": ListToMap(data.values.elasticsearch.values.data.resources.limits),
  #@      "requests": ListToMap(data.values.elasticsearch.values.data.resources.requests),
  #@    },
  #@  })
  #@  elasticsearchIngest = elasticsearchValues.get("ingest")
  #@  elasticsearchIngest.update({
  #@    "nodeSelector": ListToMap(data.values.elasticsearch.values.ingest.nodeSelector),
  #@    "resources": {
  #@      "limits": ListToMap(data.values.elasticsearch.values.ingest.resources.limits),
  #@      "requests": ListToMap(data.values.elasticsearch.values.ingest.resources.requests),
  #@    },
  #@  })
  #@  elasticsearchMaster = elasticsearchValues.get("master")
  #@  elasticsearchMaster.update({
  #@    "nodeSelector": ListToMap(data.values.elasticsearch.values.master.nodeSelector),
  #@    "resources": {
  #@      "limits": ListToMap(data.values.elasticsearch.values.master.resources.limits),
  #@      "requests": ListToMap(data.values.elasticsearch.values.master.resources.requests),
  #@    },
  #@  })
  values: #@ elasticsearchValues

redis:
  enabled: #@ data.values.redis.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.redis))
    config: #@ base64.encode(json.encode(data.values.redis))
    version: #@ data.values.redis.version
    chart: #@ data.values.redis.chart
    secrets: []
    secretKeys: []
    connection:
      protocol: "redis://"
      port: 6379
      serviceName: dep-redis-master
      username: ""
      database: ""
      secret: ""

  #@  redisValues = {}
  #@  redisValues.update(data.values.redis.values)
  #@  redisValues = struct.encode(redisValues)
  #@  redisValues = struct.decode(redisValues)

  #@  redisMaster = redisValues.get("master")
  #@  redisMaster.update({
  #@    "nodeSelector": ListToMap(data.values.redis.values.master.nodeSelector),
  #@    "resources": {
  #@      "limits": ListToMap(data.values.redis.values.master.resources.limits),
  #@      "requests": ListToMap(data.values.redis.values.master.resources.requests),
  #@    },
  #@  })
  values: #@ redisValues

nats:
  enabled: #@ data.values.nats.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.nats))
    config: #@ base64.encode(json.encode(data.values.nats))
    version: #@ data.values.nats.version
    chart: #@ data.values.nats.chart
    secrets: []
    secretKeys: []
    connection:
      protocol: "nats://"
      port: 4222
      serviceName: dep-nats
      username: ""
      database: ""
      secret: ""

  #@  natsValues = {}
  #@  natsValues.update(data.values.nats.values)
  #@  natsValues = struct.encode(natsValues)
  #@  natsValues = struct.decode(natsValues)

  #@  natsValues.update({
  #@    "nodeSelector": ListToMap(data.values.nats.values.nodeSelector),
  #@    "resources": {
  #@      "limits": ListToMap(data.values.nats.values.resources.limits),
  #@      "requests": ListToMap(data.values.nats.values.resources.requests),
  #@    },
  #@  })
  values: #@ natsValues

etcd:
  enabled: #@ data.values.etcd.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.etcd))
    config: #@ base64.encode(json.encode(data.values.etcd))
    version: #@ data.values.etcd.version
    chart: #@ data.values.etcd.chart
    secrets: []
    secretKeys: []
    connection:
      protocol: "etcd3://"
      port: 2379
      serviceName: dep-etcd
      username: ""
      database: ""
      secret: ""

  #@  etcdValues = {}
  #@  etcdValues.update(data.values.etcd.values)
  #@  etcdValues = struct.encode(etcdValues)
  #@  etcdValues = struct.decode(etcdValues)

  #@  etcdValues.update({
  #@    "nodeSelector": ListToMap(data.values.etcd.values.nodeSelector),
  #@    "resources": {
  #@      "limits": ListToMap(data.values.etcd.values.resources.limits),
  #@      "requests": ListToMap(data.values.etcd.values.resources.requests),
  #@    },
  #@  })
  values: #@ etcdValues
