#@ load("@ytt:data", "data")
#@ load("@ytt:json", "json")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:sha256", "sha256")

---
#@ dependencies = []
#@ if data.values.mysql.enabled:
#@  dependencies.extend(["mysql"])
#@ end
#@ if data.values.postgres.enabled:
#@  dependencies.extend(["postgres"])
#@ end
#@ if data.values.rabbitmq.enabled:
#@  dependencies.extend(["rabbitmq"])
#@ end
#@ if data.values.elasticsearch.enabled:
#@  dependencies.extend(["elasticsearch"])
#@ end
#@ if data.values.redis.enabled:
#@  dependencies.extend(["redis"])
#@ end
#@ if data.values.nats.enabled:
#@  dependencies.extend(["nats"])
#@ end
#@ if data.values.etcd.enabled:
#@  dependencies.extend(["etcd"])
#@ end
dependencies: #@ ",".join(dependencies)
dependenciesAsJson: #@ json.encode(dependencies)

mysql:
  enabled: #@ data.values.mysql.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.mysql))
    config: #@ base64.encode(json.encode(data.values.mysql))
    version: #@ data.values.mysql.version
    chart: #@ data.values.mysql.chart
    hasDatabase: true
    hasPassword: true
    protocol: "mysql://"
    port: 3306 
    secretKey: auth.existingSecret
    serviceName: dep-mysql
  #@ mysqlValues = {}
  #@ mysqlValues.update(data.values.mysql.values)
  #@ mysqlValues.update({ 
  #@    "auth": {
  #@      "database": data.values.repository,
  #@      "username": data.values.repository
  #@    }
  #@ })
  values: #@ mysqlValues

postgres:
  enabled: #@ data.values.postgres.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.postgres))
    config: #@ base64.encode(json.encode(data.values.postgres))
    version: #@ data.values.postgres.version
    chart: #@ data.values.postgres.chart
    hasDatabase: true
    hasPassword: true
    protocol: "postgresql://"
    port: 5432 
    secretKey: auth.existingSecret
    serviceName: dep-postgres-postgresql
  #@ postgresValues = {}
  #@ postgresValues.update(data.values.mysql.values)
  #@ postgresValues.update({ 
  #@    "auth": {
  #@      "database": data.values.repository,
  #@      "username": data.values.repository
  #@    }
  #@ })
  values: #@ postgresValues

rabbitmq:
  enabled: #@ data.values.rabbitmq.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.rabbitmq))
    config: #@ base64.encode(json.encode(data.values.rabbitmq))
    version: #@ data.values.rabbitmq.version
    chart: #@ data.values.rabbitmq.chart
    hasDatabase: false
    hasPassword: true
    protocol: "amqp://"
    port: 5672 
    secretKey: auth.existingPasswordSecret
    serviceName: dep-rabbitmq
  #@ rabbitmqValues = {}
  #@ rabbitmqValues.update(data.values.mysql.values)
  #@ rabbitmqValues.update({ 
  #@    "auth": {
  #@      "username": data.values.repository
  #@    }
  #@ })
  values: #@ rabbitmqValues

elasticsearch:
  enabled: #@ data.values.elasticsearch.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.elasticsearch))
    config: #@ base64.encode(json.encode(data.values.elasticsearch))
    version: #@ data.values.elasticsearch.version
    chart: #@ data.values.elasticsearch.chart
    hasDatabase: false
    hasPassword: false
    protocol: ""
    port: 9200
    #! secretKey: "security.existingSecret"
    secretKey: ""
    serviceName: dep-elasticsearch
  values: #@ data.values.elasticsearch.values

redis:
  enabled: #@ data.values.redis.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.redis))
    config: #@ base64.encode(json.encode(data.values.redis))
    version: #@ data.values.redis.version
    chart: #@ data.values.redis.chart
    hasDatabase: false
    hasPassword: false
    protocol: "redis://"
    port: 6379
    secretKey: ""
    serviceName: dep-redis-master
  values: #@ data.values.redis.values

nats:
  enabled: #@ data.values.nats.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.nats))
    config: #@ base64.encode(json.encode(data.values.nats))
    version: #@ data.values.nats.version
    chart: #@ data.values.nats.chart
    hasDatabase: false
    hasPassword: false
    protocol: "nats://"
    port: 4222
    secretKey: ""
    serviceName: dep-nats
  values: #@ data.values.nats.values

etcd:
  enabled: #@ data.values.etcd.enabled
  control:
    hash: #@ sha256.sum(json.encode(data.values.etcd))
    config: #@ base64.encode(json.encode(data.values.etcd))
    version: #@ data.values.etcd.version
    chart: #@ data.values.etcd.chart
    hasDatabase: false
    hasPassword: false
    protocol: "etcd3://"
    port: 2379
    secretKey: ""
    serviceName: dep-etcd
  values: #@ data.values.etcd.values
