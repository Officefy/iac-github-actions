#@ load("@ytt:data", "data")

#@ if data.values.ingress.enable:
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: #@ data.values.service.name

  #@  ingressAnnotations = {}

  #@  if data.values.ingress.annotations != None:
  #@    ingressAnnotations.update(data.values.ingress.annotations)
  #@  end

  #@  ingressAnnotations.update({ "kubernetes.io/ingress.class": data.values.ingress.className })
    
  #@  if data.values.ingress.externalDns.enable:
  #@    if data.values.pipelineControl.environmentAsSubdomains:
  #@      ingressAnnotations.update({ "external-dns.alpha.kubernetes.io/hostname": "{}.{}.{}".format(data.values.repository, data.values.environment, data.values.ingress.domain) })
  #@    else:
  #@      ingressAnnotations.update({ "external-dns.alpha.kubernetes.io/hostname": "{}-{}.{}".format(data.values.repository, data.values.environment, data.values.ingress.domain) })
  #@    end
  #@  end
  
  #@  if data.values.ingress.externalDns.enable:
  #@    if data.values.pipelineControl.environmentAsSubdomains:
  #@      ingressAnnotations.update({ "external-dns.alpha.kubernetes.io/hostname": "{}.{}.{}".format(data.values.repository, data.values.environment, data.values.ingress.domain) })
  #@    else:
  #@      ingressAnnotations.update({ "external-dns.alpha.kubernetes.io/hostname": "{}-{}.{}".format(data.values.repository, data.values.environment, data.values.ingress.domain) })
  #@    end
  #@  end

  #@  if data.values.ingress.letsencrypt.enable:
  #@    ingressAnnotations.update({ "cert-manager.io/" + data.values.ingress.letsencrypt.type: "letsencrypt-" + data.values.environment })
  #@  end
  #@
  #@  if data.values.ingress.className == "alb":
  #@    if data.values.ingress.alb.public:
  #@      ingressAnnotations.update({ "alb.ingress.kubernetes.io/scheme": "internet-facing" })
  #@    else:
  #@      ingressAnnotations.update({ "alb.ingress.kubernetes.io/scheme": "internal" })
  #@    end

  #@    ingressAnnotations.update({
  #@      "alb.ingress.kubernetes.io/target-type": "instance",
  #@      "alb.ingress.kubernetes.io/success-codes": "200-399",
  #@      "alb.ingress.kubernetes.io/ssl-redirect": "443",
  #@      "alb.ingress.kubernetes.io/group.name": data.values.ecosystem,
  #@      "alb.ingress.kubernetes.io/load-balancer-name": data.values.ecosystem,
  #@      "alb.ingress.kubernetes.io/certificate-arn": data.values.ingress.alb.certificateArn,
  #@      "alb.ingress.kubernetes.io/listen-ports": '[{"HTTPS": 443}]',
  #@    })
  #@  end
  annotations: #@ ingressAnnotations

spec:

  #@ if data.values.ingress.letsencrypt.enable:
  tls:
    - secretName: #@ "cert-" + data.values.repository
      hosts:
      #@ if data.values.pipelineControl.environmentAsSubdomains:
       - #@ "{}.{}.{}".format(data.values.repository, data.values.environment, data.values.ingress.domain)
      #@ else:
       - #@ "{}-{}.{}".format(data.values.repository, data.values.environment, data.values.ingress.domain)
      #@ end
  #@ end

  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: #@ data.values.deployment.name
                port:
                  number: #@ data.values.port
      #@ if data.values.pipelineControl.environmentAsSubdomains:
      host: #@ "{}.{}.{}".format(data.values.repository, data.values.environment, data.values.ingress.domain)
      #@  else:
      host: #@ "{}-{}.{}".format(data.values.repository, data.values.environment, data.values.ingress.domain)
      #@  end


#@  if data.values.ingress.className == "traefik":
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: #@ data.values.service.name
spec:
  entryPoints:
    - web
  routes:
    - kind: Rule
      #@ if data.values.pipelineControl.environmentAsSubdomains:
      match: #@ "Host(`{}.{}.{}`)".format(data.values.repository, data.values.environment, data.values.ingress.domain)
      #@  else:
      match: #@ "Host(`{}-{}.{}`)".format(data.values.repository, data.values.environment, data.values.ingress.domain)
      #@  end
      services:
        - name: #@ data.values.service.name
          port:  #@ data.values.port
#@  end
#@  end