#@ load("@ytt:md5", "md5")
#@ load("@ytt:data", "data")
#@ load("@ytt:json", "json")

---
#@ if data.values.job.enable:
apiVersion: batch/v1
kind: Job

metadata:
  name: #@ "{}-{}".format(data.values.job.name, md5.sum(json.encode(data.values)))
  labels: #@ data.values.job.labels
  annotations: #@ data.values.job.annotations

spec:
  backoffLimit: #@ data.values.job.backoffLimit

  template:
    spec:
      restartPolicy: Never

      containers:
      - name: #@ "{}-{}".format(data.values.job.name, md5.sum(json.encode(data.values)))
        image: #@ "{}/{}/{}:{}".format(data.values.containerRegistry, data.values.organization, data.values.repository, data.values.tag)
        command: #@ data.values.job.command

        #@ jobEnvs = []
        #@ jobEnvs.extend(data.values.env)
        
        #@ for i in data.values.envFromConfigMaps:
        #@   jobEnvs.extend([{ 
        #@    "name": i, 
        #@    "valueFrom": {
        #@      "configMapKeyRef": {
        #@        "name": data.values.repository,
        #@        "key": i,
        #@      }
        #@    }
        #@   }])
        #@ end
        
        #@ for i in data.values.envFromSecrets:
        #@   jobEnvs.extend([{ 
        #@    "name": i, 
        #@    "valueFrom": {
        #@      "secretKeyRef": {
        #@        "name": data.values.repository,
        #@        "key": i,
        #@      }
        #@    }
        #@   }])
        #@ end
        
        #@ for i in data.values.envFromDependencies:
        #@   jobEnvs.extend([{ 
        #@    "name": (i + "_connection_string").upper(),
        #@    "valueFrom": {
        #@      "secretKeyRef": {
        #@        "name": "dep-secret-" + i,
        #@        "key": "connection-string",
        #@      }
        #@    }
        #@   }])
        #@ end
        env: #@ jobEnvs
#@ end
