#@ load("@ytt:md5", "md5")
#@ load("@ytt:data", "data")
#@ load("@ytt:json", "json")
#@ load("@ytt:sha256", "sha256")
#@ load("@ytt:base64", "base64")

#@ configMD5 = md5.sum("data")
#@ configSHA256 = sha256.sum("data")
#@ configEncoded = base64.encode(json.encode(data.values))

#@ globalLabels = {}
#@ globalLabels.update({ "ecosystem": data.values.ecosystem })
#@ globalLabels.update({ "environment": data.values.environment })

#@ globalAnnotations = {}
#@ globalAnnotations.update({ "pipe/config-md5": configMD5 })
#@ globalAnnotations.update({ "pipe/config-sha256": configSHA256 })
#@ globalAnnotations.update({ "pipe/ecosystem": data.values.ecosystem })
#@ globalAnnotations.update({ "pipe/environment": data.values.environment })
#@ globalAnnotations.update({ "pipe/updated-at": data.values.pipelineControl.datetime })
#@ globalAnnotations.update({ "kubectl.kubernetes.io/last-applied-configuration": data.values.pipelineControl.datetime })

---
#@ if data.values.namespace.enable:
apiVersion: v1
kind: Namespace
metadata:
  name: #@ data.values.repository

  #@ namespaceLabels = {}
  #@ namespaceLabels.update(data.values.namespace.labels)
  #@ namespaceLabels.update(globalLabels)
  labels: #@ namespaceLabels

  #@ namespaceAnnotations = {}
  #@ namespaceAnnotations.update(data.values.namespace.annotations)
  #@ namespaceAnnotations.update(globalAnnotations)
  #@ if data.values.features.enableLinkerd:
  #@ namespaceAnnotations.update({ "linkerd.io/inject": "enabled" })
  #@ end
  annotations: #@ namespaceAnnotations
#@ end

---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: pipeline-config
  #@ if data.values.namespace.enable:
  namespace: #@ data.values.repository
  #@ else:
  namespace: default
  #@ end

  #@ secretAnnotations = {}
  #@ secretAnnotations.update(globalAnnotations)
  annotations: #@ secretAnnotations
data:
  data: #@ configEncoded
  config-md5: #@ configMD5
  config-sha256: #@ configSHA256
  dockerconfigjson: #@ base64.encode(data.values.pipelineControl.dockerconfigjson)

---
apiVersion: v1
kind: Secret
type: kubernetes.io/dockerconfigjson
metadata:
  name: registry-token
  #@ if data.values.namespace.enable:
  namespace: #@ data.values.repository
  #@ else:
  namespace: default
  #@ end

  #@ secretAnnotations = {}
  #@ secretAnnotations.update(globalAnnotations)
  annotations: #@ secretAnnotations
data:
  .dockerconfigjson: #@ data.values.pipelineControl.dockerconfigjson

---
#@ if data.values.deployment.enable:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.deployment.name
  #@ if data.values.namespace.enable:
  namespace: #@ data.values.repository
  #@ else:
  namespace: default
  #@ end

  #@ deploymentLabels = {}
  #@ deploymentLabels.update(globalLabels)
  #@ deploymentLabels.update(data.values.deployment.labels)
  labels: #@ deploymentLabels

  #@ deploymentAnnotations = {}
  #@ deploymentAnnotations.update(globalAnnotations)
  #@ deploymentAnnotations.update(data.values.deployment.annotations)
  annotations: #@ deploymentAnnotations
spec:
  replicas: #@ data.values.deployment.replicas

  selector:
    #@ if data.values.deployment.matchLabels.overwrite:
    matchLabels: #@ data.values.deployment.matchLabels.labels
    #@ else:
    #@ deploymentMatchLabels = {}
    #@ deploymentMatchLabels.update({ "pipe/selector": data.values.repository + "." + data.values.deployment.name })
    matchLabels: #@ deploymentMatchLabels
    #@ end
  template:
    metadata:
      #@ deploymentTemplateLabels = {}
      #@ deploymentTemplateLabels.update(globalLabels)
      #@ deploymentTemplateLabels.update({ "pipe/selector": data.values.repository + "." + data.values.deployment.name })
      #@ deploymentTemplateLabels.update(data.values.deployment.templateLabels)
      labels: #@ deploymentTemplateLabels
    spec:
      imagePullSecrets:
        - name: registry-token
      containers:
        - name: #@ data.values.deployment.name
          image: #@ "{}/{}/{}:{}".format(data.values.containerRegistry, data.values.organization, data.values.repository, data.values.tag)
          imagePullPolicy: Always
          resources: #@ data.values.deployment.resources
          env:
            - name: DEBUG
              value: "*"
            - name: TZ
              value: America/Sao_Paulo
#@ end

---
#@ if data.values.ingress.enable:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: #@ data.values.ingress.name
  #@ if data.values.namespace.enable:
  namespace: #@ data.values.repository
  #@ else:
  namespace: default
  #@ end
  annotations:
    #@ if data.values.ingress.type == "alb":
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/success-codes: 200-399
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-2016-08
    alb.ingress.kubernetes.io/group.name: #@ data.values.ecosystem
    alb.ingress.kubernetes.io/load-balancer-name: #@ data.values.ecosystem
    alb.ingress.kubernetes.io/certificate-arn: #@ data.values.ingress.alb.certificateArn
    #@ end
spec:
  rules:
  - host: #@ "{}.{}.{}".format(data.values.repository, data.values.environment, data.values.ingress.domain)
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: #@ data.values.deployment.name
            port:
              number: #@ data.values.deployment.port
#@ end
